一个C笔试题引出一系列的问题

下段代码的输出是什么？(这是我做过的一个C笔试题目，当时213了，没有给出完全正确的答案，现在来分析总结一下，防止下次再出现这种213的错误)

    int main(void)

    {
            int a[] = {6, 7, 8, 9, 10};
            int *p = a;
            *(p++) += 123;   /* 其实没必要把p++扩起来，*和++在同一优先级，从右到左的结合顺序 */

            printf("%d, %d\n", *p, *(++p));


            return 0;
    }

复制代码
输出是：8,8

来解释一下为什么是这个结果，主要注意两个地方：

     1、*(p++) += 123;在这个题目里，这行代码其实是忽悠你的，简化就是p++；

     2、第二点就需要注意函数参数的传递，函数参数传递是通过栈来实现(大部分是通过栈，还有些是通过寄存器)，栈的操作方式是FILO，传递参数的时候是第一个参数先入栈，然后再是第二个，第三个，在出栈的时候则相反。所以为什么第一个输出是8，应该不难理解了。

     虽然像printf("%d, %d\n", *p, *(++p));这样的代码，平常是会被鄙视的，不提倡这样的代码风格和写法，但是作为笔试题还是挺考验基本功的。



到这里这个题目算是做完了，但是我来深入分析一下：

     1、*(p++) += 123;这行代码产生了什么样的影响？

     a[0] 的值变为129；

     p指针向后移动一个单位。

     对于p++这样的运算，不会对本条语句中产生影响，只会对下一条语句产生作用。

     2、 a += b 是否和a = a+b等效？

     大部分情况下是等效的，但是也有特例。就是我们下面的情况：

*(p++) += 123;

     不等效于

*(p++) = *(p++) + 123;

如果讲第一行代码替换为第二行，输出结果为 9,9。
