%[ ] 的用法： %[ ] 表示要读入一个字符集合 , 如果 [ 后面第一个字符是 ”^” ，则表示反意思。

[ ] 内的字符串可以是 1 或更多字符组成。空字符集（ %[] ）是违反规定的，可

导致不可预知的结果。 %[^] 也是违反规定的。

%[a-z] 读取在 a-z 之间的字符串，如果不在此之前则停止，如

char s[]=”hello, my friend” ; // 注意 : , 逗号在不 a-z 之间

sscanf( s, “%[a-z]”, string ) ; // string=hello

%[^a-z] 读取不在 a-z 之间的字符串，如果碰到 a-z 之间的字符则停止，如

char s[]=”HELLOkitty” ; // 注意 : , 逗号在不 a-z 之间

sscanf( s, “%[^a-z]”, string ) ; // string=HELLO

%*[^=] 前面带 * 号表示不保存变量。跳过符合条件的字符串。

char s[]=”notepad=1.0.0.1001″ ;

char szfilename [32] = “” ;

int i = sscanf( s, “%*[^=]“, szfilename ) ; // szfilename=NULL, 因为没保存

int i = sscanf( s, “%*[^=]=%s”, szfilename ) ; // szfilename=1.0.0.1001

%40c 读取 40 个字符

The run-time

library does not automatically append a null terminator

to the string, nor does reading 40 characters

automatically terminate the scanf() function. Because the

library uses buffered input, you must press the ENTER key

to terminate the string scan. If you press the ENTER before

the scanf() reads 40 characters, it is displayed normally,

and the library continues to prompt for additional input

until it reads 40 characters

%[^=] 读取字符串直到碰到 ’=’ 号， ’^’ 后面可以带更多字符 , 如：

char s[]=”notepad=1.0.0.1001″ ;

char szfilename [32] = “” ;

int i = sscanf( s, “%[^=]“, szfilename ) ; // szfilename=notepad

如果参数格式是： %[^=:] ，那么也可以从 notepad:1.0.0.1001 读取 notepad
例1：从中提取tom
const char* url = ““;
char uri[10] = {0};
sscanf(url, “%*[^:]:%[^@]“, uri);
cout << uri << endl;
例2：从iios/12DDWDFF@122中提取12DDWDFF
const char* s = “iios/12DDWDFF@122″;
char buf[20];
sscanf(s, “%*[^/]/%[^@]“, buf);
cout << buf << endl;
总结： %[] 有很大的功能，但是并不是很常用到，主要因为：

1 、许多系统的 scanf 函数都有漏洞 . ( 典型的就是 TC 在输入浮点型时有时会出错 ).

2 、用法复杂 , 容易出错 .

3 、编译器作语法分析时会很困难 , 从而影响目标代码的质量和执行效率 .

个人觉得第 3 点最致命，越复杂的功能往往执行效率越低下。而一些简单的字符串分析我们可以自已处理。
其他的一些东东：
1、定制自己的扫描集 %[abc]、%[a-z]、%[^abc]、%[^a-z]，比isdigit()、isalpha()更加灵活。[]内是匹配的字符,^表示求反集。
int i;
char str[80], str2[80];
// scanf(“%d%[abc]%s”, &i, str, str2);
// printf(“%d %s %s\n”,i,str,str2);
// scanf(“%[a-zA-Z0-9]“, str);
// scanf(“%[^abce]“, str);
scanf(“%[^a-z]“, str);
printf(“%s\n”,str);
2、读入一个地址并显示内存地址的内容
int main(void)
{
char ch=’c';
printf(“%p\n”, &ch); // print the address of ch.
char *p;
cout<<“Enter an address: “;
scanf(“%p”, &p); //input the address displayed above
printf(“Value at location %p is %c\n”,p,*p);
return 0;
}

3、丢弃不想要的空白符：scanf(“%c %c”)；

4、控制字符串中的非空白符：导致scanf()读入并丢弃输入流中的一个匹配字符。”%d，%d”；

5、压缩输入：在格式码前加上*，则用户就可以告诉scanf()读这个域，但不把它赋予任何变量。
scanf(“%c%*c, &ch); 使用此方法可以在字符处理时吃掉多余的回车。
