嵌 入式WEB服务器BOA的移植方法（一）2007-2-26 16:20:00
  随着Internet技术的兴起，在嵌入式设备的管理与交互中，基于Web方式的应用成为目前的主流，
这种程序结构也就是大家非常熟悉的B/S结 构，即在 嵌入式设备上运行一个支持脚本或CGI功能的Web服务器，
能够生成动态页面，在用户端只需要通过Web浏览器就可以对嵌入式设备进行 管理和监控，非常方 便实用。
本节主要介绍这种应用的开发和移植工作。
用户首先需要在嵌入式设备上成功移植支持脚本或CGI功能的Web 服务器，然后才能进行应用程序的开发。
    1、 嵌入式Web服务器移植  由于嵌入式设备资源一般都比较有限，并且也不需要能同时处理很多用户的请求，
因此不会使用Linux下最常用的如Apache 等服务器，而需要使用一些专门为嵌入式设备设计的Web服务器，
这些Web服务器在存贮空间和运行时所占有的内存空间上都会非常适合于嵌入式应用 场合。
   典型的嵌入式Web服务器有Boa （www.boa.org） 和thttpd （http://www.acme.com/software/thttpd/） 等，
它们和Apache等高性能的Web服务器主要的区别在于它们一般是 单进程服务器，只有在完成一个用户请求后才能响应
另一个用户的 请求，而无法并发响应，但这在嵌入式设备的应用场合里已经足够了。
     我们绍比较常用的Boa服务器的移植。
     Boa是一个非常小巧的Web服务器，可执行代码只有约60KB。它是一个单任务Web服务器，只能依次完成用户的请求，
而不会fork出新的进 程来处理 并发连接请求。但Boa支持CGI，能够为CGI程序fork出一个进程来执行。Boa的设计目标
是速度和安全，在其站点公布的性能测 试中，Boa的性能 要好于Apache服务器。
    第一步完成Boa程序的移植。从www.boa.org下载Boa源码，当前最新版本为0.94.13，将其解压并进入 源码目录的src
子目录
    # tar xzf boa-0.94.13.tar.gz
    # cd boa-0.94.13/src
生成Makefile文件
    # ./configure
    修改Makefile文件，找到CC=gcc，将其改成CC = arm-linux-gcc，再找到CPP = gcc –E，
将其改成CPP = arm-linux-gcc –E，并保存退出。
    然后运行make进行编译，得到的可执行程序为boa，将调试信息剥去，得到的最后程序只有约60KB大小。
    # make
    # arm-linux-strip boa
   第二步完成Boa的配置，使其能够支持CGI程序的执行。Boa需要在/etc目录下建立一个boa目录，里面放入Boa的主要
配置文件 boa.conf。在Boa源码目录下已有一个示例boa.conf，可以在其基础上进行修改，下面解释一下该文件的含义：
#监听的端口号，缺省 都是80，一般无需修改
Port 80
# bind调用的IP地址，一般注释掉，表明绑定到INADDR_ANY，通配于服务器的所有IP地址
#Listen 192.68.0.5
# 作为哪个用户运行，即它拥有该用户的权限，一般都是nobody，需要/etc/passwd中有
#nobody用户
User nobody
#作为哪个用户组运行，即它拥有该用户组的权限，一般都是nogroup，需要在/etc/group文
#件中有 nogroup组
Group nogroup
#当服务器发生问题时发送报警的email地址，目前未用，注释掉
#ServerAdmin root@localhost
#错误日志文件。如果没有以/开始， 则表示从服务器的根路径开始。如果不需要错误日志，
则用#/dev/null。在下面设置时，注意一定要建立/var/log/boa目录
ErrorLog /var/log/boa/error_log
#访问日志文件。如果没有以/开始，则表示从服务器的根路径开始。如果不需要错误日志，
则 用#/dev/null或直接注释掉。在下面设置时，注意一定要建立/var/log/boa目录
#AccessLog /var/log/boa/access_log
#是否使用本地时间。如果没有注释掉，则使用本地时间。注释掉则使用UTC时间
#UseLocaltime
# 是否记录CGI运行信息，如果没有注释掉，则记录，注释掉则不记录
#VerboseCGILogs
#服务器名字
ServerName www.hyesco.com
#是否启动虚拟主机功能，即设备可 以有多个网络接口，每个接口都可以拥有一个虚拟的Web服
#务器。一般注释掉，即不需要启动
#VirtualHost
#非常重 要，HTML文档的主目录。如果没有以/开始，则表示从服务器的根路径开始。
DocumentRoot /var/www
#如果收到一个 用户请求的话，在用户主目录后再增加的目录名
UserDir public_html
#HTML目录索引的文件名，也是没有用户只指明访 问目录时返回的文件名
DirectoryIndex index.html
#当HTML目录没有索引文件时，用户只指明访问目录 时，boa会调用该程序生成索引文件然后
#返回给用户，因为该过程比较慢最好不执行，可以注释掉或者给每个HTML目录加 上#DirectoryIndex指明的文件
#DirectoryMaker /usr/lib/boa/boa_indexer
#如果 DirectoryIndex不存在，并且DirectoryMaker被注释，那么就用Boa自带的索引
#生成程序来生成目录的索引文件并输出 到下面目录，该目录必须是Boa能读写
# DirectoryCache /var/spool/boa/dircache
#一个连接所 允许的HTTP持续作用请求最大数目，注释或设为0都将关闭HTTP持续作用
KeepAliveMax 1000
#HTTP持续作用中服 务器在两次请求之间等待的时间数，以秒为单位，超时将关闭连接
KeepAliveTimeout 10
#指明mime.types文件位 置。如果没有以/开始，则表示从服务器的根路径开始。可以注释掉
#避免使用mime.types文件，此时需要用AddType在本文件里指明
MimeTypes /etc/mime.types
#文件扩展名没有或未知的话，使用的缺省MIME类型
DefaultType text/plain
# 提供CGI程序的PATH环境变量值
CGIPath /bin:/usr/bin:/usr/local/bin
#将文件扩展名和 MIME类型关联起来，和mime.types文件作用一样。如果用mime.types
#文件，则注释掉，如果不使用mime.types文 件，则必须使用
#AddType application/x-httpd-cgi cgi
#指明文档重定向路径
#Redirect /bar http://elsewhere/feh/bar
# 为路径加上别名
Alias /doc /usr/doc
#非常重要，指明CGI脚本的虚拟路径对应的实际路径。一般所有的CGI脚本都要 放在实际路径
#里，用户访问执行时输入站点+虚拟路径+CGI脚本名
ScriptAlias /cgi-bin/ /var/www/cgi-bin/
   用户可以根据自己需要，对boa.conf进行修改，但必须要保证其他的辅助文件和设置必须和boa.conf里的配置相符，
不然Boa就不能正 常工作。 在上面的例子中，我们还需要创建日志文件所在目录/var/log/boa，
创建HTML文档的主目录/var/www，将 mime.types文件拷贝 到/etc目录，
创建CGI脚本所在目录/var/www/cgi-bin/。mime.types文件用来指明 不同文件扩展名对应的MIME类型，
一般 可以直接从Linux主机上拷贝一个，大部分也都是在主机的/etc目录下。
===================================================================
 
===================host test=======================================
1. 进入 boa-0.94.13/src
 ./configure
 make
2.在etc/下建立boa目录并将 boa.conf拷贝到该目录下.更改boa.conf
      Group nogroup  ＝＝＝》Group 0
3.在 /var/log/下建立boa目录，该目录下可以查看boa服务器的日志
4.其它的一些路径
默认是/var/www下的内容可以访问                       （DocumentRoot /var/www）
默 认cgi ：ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/  （cgi可执行程序放在 /usr/lib/cgi-bin/目录下）
 例子http://201.201.201.249/cgi-bin/cgi-test.cgi
CGIPath /bin:/usr/bin:/usr/local/bin
 只有这些目录下的命令可以被调用，如果要root的权限（如ifconfig配置 ip）需要加上/sbin
 
 
 
=====================================================================
cgi例子
=====================================================================
//pass.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char* getcgidata(FILE* fp, char* requestmethod);
int main()
{
       char *input;
       char *req_method;
       char name[64];
       char pass[64];
       int i = 0;
       int j = 0;
      
//     printf("Content-type: text/plain; charset=iso-8859-1\n\n");
       printf("Content-type: text/html\n\n");
       printf("The following is query reuslt:<br><br>");

       req_method = getenv("REQUEST_METHOD");
       input = getcgidata(stdin, req_method);

       // 我们获取的input字符串可能像如下的形式
       // Username="admin"&Password="aaaaa"
       // 其中"Username="和"&Password="都是固定的
       // 而"admin"和"aaaaa"都是变化的，也是我们要获取的
      
       // 前面9个字符是UserName=
       // 在"UserName="和"&"之间的是我们要取出来的用户名
       for ( i = 9; i < (int)strlen(input); i++ )
       {
              if ( input[i] == '&' )
              {
                     name[j] = '\0';
                     break;
              }                  
              name[j++] = input[i];
       }

       // 前面9个字符 + "&Password="10个字符 + Username的字符数
       // 是我们不要的，故省略掉，不拷贝
       for ( i = 19 + strlen(name), j = 0; i < (int)strlen(input); i++ )
       {
              pass[j++] = input[i];
       }
       pass[j] = '\0';

       printf("Your Username is %s<br>Your Password is %s<br> \n", name, pass);
      
       return 0;
}

char* getcgidata(FILE* fp, char* requestmethod)
{
       char* input;
       int len;
       int size = 1024;
       int i = 0;
      
       if (!strcmp(requestmethod, "GET"))
       {
              input = getenv("QUERY_STRING");
              return input;
       }
       else if (!strcmp(requestmethod, "POST"))
       {
              len = atoi(getenv("CONTENT_LENGTH"));
              input = (char*)malloc(sizeof(char)*(size + 1));
             
              if (len == 0)
              {
                     input[0] = '\0';
                     return input;
              }
             
              while(1)
              {
                     input[i] = (char)fgetc(fp);
                     if (i == size)
                     {
                            input[i+1] = '\0';
                            return input;
                     }
                    
                     --len;
                     if (feof(fp) || (!(len)))
                     {
                            i++;
                            input[i] = '\0';
                            return input;
                     }
                     i++;
                    
              }
       }
       return NULL;
}
 
 
/*
*  gcc -o pass.cgi pass.c
*/
//pass.html
<html>
<head><title>用户登陆验证</title>< /head>
<body>
<form name="form1" action="/cgi-bin/pass.cgi" method="POST">
<table align="center">
    <tr><td align="center" colspan="2"></td></tr>
    <tr>
       <td align="right">用户名</td>
       <td><input type="text" name="Username"></td>
    </tr>
    <tr>
       <td align="right">密&nbsp;&nbsp;码</td>
       <td><input type="password" name="Password"></td>
    </tr>
    <tr>
       <td><input type="submit" value="登  录"></td>
       <td><input type="reset" value="取  消"></td>
    </tr>
</table>
</form>
</body>
</html>
